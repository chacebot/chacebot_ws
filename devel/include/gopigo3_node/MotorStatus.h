// Generated by gencpp from file gopigo3_node/MotorStatus.msg
// DO NOT EDIT!


#ifndef GOPIGO3_NODE_MESSAGE_MOTORSTATUS_H
#define GOPIGO3_NODE_MESSAGE_MOTORSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gopigo3_node
{
template <class ContainerAllocator>
struct MotorStatus_
{
  typedef MotorStatus_<ContainerAllocator> Type;

  MotorStatus_()
    : low_voltage(false)
    , overloaded(false)
    , power(0)
    , encoder(0.0)
    , speed(0.0)  {
    }
  MotorStatus_(const ContainerAllocator& _alloc)
    : low_voltage(false)
    , overloaded(false)
    , power(0)
    , encoder(0.0)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _low_voltage_type;
  _low_voltage_type low_voltage;

   typedef uint8_t _overloaded_type;
  _overloaded_type overloaded;

   typedef int8_t _power_type;
  _power_type power;

   typedef float _encoder_type;
  _encoder_type encoder;

   typedef float _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::gopigo3_node::MotorStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gopigo3_node::MotorStatus_<ContainerAllocator> const> ConstPtr;

}; // struct MotorStatus_

typedef ::gopigo3_node::MotorStatus_<std::allocator<void> > MotorStatus;

typedef boost::shared_ptr< ::gopigo3_node::MotorStatus > MotorStatusPtr;
typedef boost::shared_ptr< ::gopigo3_node::MotorStatus const> MotorStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gopigo3_node::MotorStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gopigo3_node::MotorStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gopigo3_node

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/pi/ros_catkin_ws/build/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'gopigo3_node': ['/home/pi/gopigo3_ws/src/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gopigo3_node::MotorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gopigo3_node::MotorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gopigo3_node::MotorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gopigo3_node::MotorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gopigo3_node::MotorStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gopigo3_node::MotorStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gopigo3_node::MotorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa9d221cf281ffba79b583b9dd588c6f";
  }

  static const char* value(const ::gopigo3_node::MotorStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa9d221cf281ffbaULL;
  static const uint64_t static_value2 = 0x79b583b9dd588c6fULL;
};

template<class ContainerAllocator>
struct DataType< ::gopigo3_node::MotorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gopigo3_node/MotorStatus";
  }

  static const char* value(const ::gopigo3_node::MotorStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gopigo3_node::MotorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool low_voltage\n\
bool overloaded\n\
int8 power      # PWM duty cycle -100 ... 100\n\
float32 encoder # degree\n\
float32 speed   # degree per second\n\
";
  }

  static const char* value(const ::gopigo3_node::MotorStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gopigo3_node::MotorStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.low_voltage);
      stream.next(m.overloaded);
      stream.next(m.power);
      stream.next(m.encoder);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gopigo3_node::MotorStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gopigo3_node::MotorStatus_<ContainerAllocator>& v)
  {
    s << indent << "low_voltage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.low_voltage);
    s << indent << "overloaded: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.overloaded);
    s << indent << "power: ";
    Printer<int8_t>::stream(s, indent + "  ", v.power);
    s << indent << "encoder: ";
    Printer<float>::stream(s, indent + "  ", v.encoder);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GOPIGO3_NODE_MESSAGE_MOTORSTATUS_H
